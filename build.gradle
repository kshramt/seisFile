

group = 'edu.sc.seis'
version = '1.1.0beta3'

binDistFiles = copySpec {
    from('build/output') {
        fileMode=0755
        include('bin/**')
    }
    from('build/output') {
        include('lib/**')
    }
}

distFiles = copySpec {
    with(binDistFiles)
    from('build/docs') {
        include('javadoc/**')
    }
    from('build') {
        include('build.gradle')
        include('settings.gradle')
    }
    from('.') {
        include('gpl-3.0.txt')
        include('README.txt')
        include('doc/**')
        include('src/**')
        include('gradleWrapper/**')
        include('gradlew.bat')
        exclude('**/*.svn')
    }
    from('.') {
        fileMode=0755
        include('gradlew')
    }
    from('build') {
        include('build.gradle')
    }
}


task explodeBin(type: Sync, dependsOn: ['makeScript' ]) {
    group = 'dist'
    with binDistFiles
    into file("$buildDir/explode")
}
task explodeDist(type: Sync, dependsOn: ['makeScript', 'javadoc', 'wrapper', 'createBuildScript']) {
    group = 'dist'
    with distFiles
    into file("$buildDir/explode")
}


task tarDist(type: Tar, dependsOn: ['makeScript', 'javadoc', 'wrapper', 'createBuildScript']) {
    dirName = project.name+'-'+version
    compression = Compression.GZIP
    into(dirName) {
        with distFiles
    }
}

task makeScript(dependsOn: copyToLib) << { task ->
    group = 'build'
    dExtras = getDExtras()
    doBat = false
//    ScriptBuilder.create('seedlinktest', 'edu.sc.seis.seisFile.seedlink.Client', task.project, dExtras:dExtras, bat:doBat, yourkit:true)
    ScriptBuilder.create('seedlinkclient', 'edu.sc.seis.seisFile.seedlink.Client', task.project, dExtras:dExtras, bat:doBat)
    ScriptBuilder.create('saclh', 'edu.sc.seis.seisFile.sac.ListHeader', task.project, dExtras:dExtras, bat:doBat)
}

def getDExtras() {
    return [ 'seisFile':getVersion()]
}

assemble.dependsOn(tarDist)

